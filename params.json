{"name":"Audit","tagline":"Demoiselle Audit","body":"# Demoiselle Audit\r\n\r\nÉ o componente do Framework Demoiselle para gravação de trilhas das ações dos usuários que pode ser usado para realização de Auditoria, sua arquitetura foi projetada para ser flexível assim como o Framework Demoiselle.\r\n\r\nSe você tem a necessidade de responder a algumas perguntas do que esta acontecendo na sua camada de dados como:\r\n\r\n- Quem fez a operação?\r\n- Horário da operação?\r\n- IP de origem\r\n- Nome do Sistema\r\n- O que foi realizado?\r\n- Qual objeto foi manipulado?\r\n- Quais foram os dados atingidos pela operação?\r\n\r\nEntão esse componente serve para você.\r\n\r\nEsse componente foi desenhado para ser multi-sistemas podendo ser instalado em um servidor a parte e vários sistemas enviarem para ele as trilhas de auditoria.\r\n\r\n## Processors\r\nUm Processor tem como finalidade dar um destino que você deseja para o objeto que representa a trilha de auditoria.\r\n\r\nAtualmente estamos disponibilizando um Processor de REST para atender a questão de ser multi-sistema e outro Processor para MONGO.\r\n\r\n### Processor REST\r\n\r\nPara utilizar esse Processor é necessário adicionar no pom.xml do seu projeto o seguinte trecho:\r\n\r\n```xml\r\n    <dependency>\r\n        <groupId>br.gov.frameworkdemoiselle.component.audit</groupId>\r\n        <artifactId>demoiselle-audit-processors-rest</artifactId>\r\n        <version>1.0.3</version>\r\n    </dependency>\r\n```\r\n\r\n#### Configuração demoiselle.properties\r\n\r\nPara o correto funcionamento é necessário adicionar no demoiselle.properties as seguintes configurações:\r\n\r\nChave     | Descrição\r\n----------|------------------------------------------------\r\nframeworkdemoiselle.audit.processor.rest.server.url | URL do serviço REST para o envio das trilhas.\r\n\r\n### Processor MONGO\r\n\r\nPara utilizar esse Processor é necessário adicionar no pom.xml do seu projeto o seguinte trecho:\r\n\r\n```xml\r\n    <dependency>\r\n        <groupId>br.gov.frameworkdemoiselle.component.audit</groupId>\r\n        <artifactId>demoiselle-audit-processors-mongo</artifactId>\r\n        <version>1.0.3</version>\r\n    </dependency>\r\n```\r\n\r\n#### Configuração demoiselle.properties\r\n\r\nPara o correto funcionamento é necessário adicionar no demoiselle.properties as seguintes configurações:\r\n\r\nChave     | Descrição\r\n----------|------------------------------------------------\r\nframeworkdemoiselle.audit.processor.mongo.server.url        | URL do servidor onde se encontra o MongoDB\r\nframeworkdemoiselle.audit.processor.mongo.database.name     | Nome do database\r\nframeworkdemoiselle.audit.processor.mongo.collection.name   | Nome da coleção\r\nframeworkdemoiselle.audit.processor.mongo.database.user     | Usuário (se necessário)\r\nframeworkdemoiselle.audit.processor.mongo.database.password | Senha\r\n\r\n### Criando seu próprio Processor\r\n\r\nVocê poderá criar o seu próprio ponto de extensão, podendo ser um JMS, FTP, Banco de Dados NoSql, você tem a liberdade de criar, para que isso sejá possível você deve criar um projeto Maven e utilizar o parent no seu pom.xml:\r\n\r\n```xml\r\n<parent>\r\n    <groupId>br.gov.frameworkdemoiselle.component.audit</groupId>\r\n    <artifactId>demoiselle-audit-parent</artifactId>\r\n    <version>1.0.3</version>\r\n</parent>\r\n```\r\n\r\nCriar uma classe que extenda de **br.gov.frameworkdemoiselle.component.audit.implementation.processor.AbstractProcessor** e implementar o método **public void execute(@Observes @AuditProcessor Trail trail)**.\r\n\r\nÉ dentro do bloco de código você implementará o destino que você deseja dar ao objeto Trail.\r\n\r\nPara o bom funcionamento do seu Processor você deverá seguir as seguintes recomendações:\r\n\r\n- Antes de implementar seu código é necessário chamar o método **super.execute(trail)** para que o componente possa saber qual é a classe do Processor que esta sendo processada, isso é necessário para a situação de falha na execução do seu Processor e o componente possa reprocessar novamente no futuro;\r\n- Quando houver algum tratamento de exceção no seu código como blocos try e catch você deverá além de realizar seu próprio tratamento a chamada do método **fail([String com a mensagem de Erro], [Objeto Trail]);** para que o componente possa reprocessar novamente no futuro;\r\n\r\nVocê pode basear sua implementação no código do RESTProcessor no caminnho *impl/processors/rest/src/main/java/br/gov/frameworkdemoiselle/component/audit/processors/rest/RESTProcessors.java*\r\n\r\n## Auditors\r\n\r\nO objetivo dos Auditors é estabelecer a camada que será auditada, atualmente exste dois Auditors: camada de Persistência chamada PersistenceAuditor e para Visão chamado ViewAuditor.\r\n\r\nUm Auditor tem como objetivo executar a coleta de dados, preenchimento do objeto Trail com dados e disparar evento para o Processors.\r\n\r\nOs dados coletados pelos Auditor são:\r\n\r\n- Quem fez a operação?\r\n- Horário da operação?\r\n- IP de origem\r\n- Nome do Sistema\r\n- O que foi realizado?\r\n- Qual objeto foi manipulado?\r\n- Quais foram os dados atingidos pela operação?\r\n\r\n### Auditor de Persistência\r\n\r\nPara utilizar esse Auditor é necessário adicionar no pom.xml do seu projeto o seguinte trecho:\r\n\r\n```xml\r\n    <dependency>\r\n        <groupId>br.gov.frameworkdemoiselle.component.audit</groupId>\r\n        <artifactId>demoiselle-audit-auditors-persistence</artifactId>\r\n        <version>1.0.3</version>\r\n    </dependency>\r\n```\r\n\r\n### Auditor de Visão\r\n\r\nPara utilizar esse Auditor é necessário adicionar no pom.xml do seu projeto o seguinte trecho:\r\n\r\n```xml\r\n    <dependency>\r\n        <groupId>br.gov.frameworkdemoiselle.component.audit</groupId>\r\n        <artifactId>demoiselle-audit-auditors-view</artifactId>\r\n        <version>1.0.3</version>\r\n    </dependency>\r\n```\r\n\r\n### Criando seu próprio Auditor\r\n\r\nSe você tiver interesse em auditar outra camada da sua aplicação você deverá:\r\n\r\n- Criar um projeto Maven e utilizar o parent no seu pom.xml\r\n\r\n```xml\r\n<parent>\r\n    <groupId>br.gov.frameworkdemoiselle.component.audit</groupId>\r\n    <artifactId>demoiselle-audit-parent</artifactId>\r\n    <version>1.0.3</version>\r\n</parent>\r\n```\r\n\r\n- Criar uma classe que extenda de **br.gov.frameworkdemoiselle.component.audit.implementation.auditors.AbstractAuditor**;\r\n- Implementar os métodos que irão interceptar o ciclo de vida da camada;\r\n- Criar um objeto do tipo Trail e preencher seus dados básicos;\r\n- Chamar o método da **consume([Objeto Trail])**;\r\n\r\nCaso seu Processor precise ser configurado, você deverá criar uma Classe que utilize a funcionalidade @Configuration do Demoiselle http://demoiselle.sourceforge.net/docs/framework/reference/2.4.0/html/configuracao.html,\r\ncomo exemplo você poderá se basear na classe *impl/processors/rest/src/main/java/br/gov/frameworkdemoiselle/component/audit/processors/rest/RESTConfig.java*\r\n\r\nApartir desse momento o componente estará apto a repassar esse objeto para os Processors definidos no pom.xml do seu projeto.\r\n\r\nNa sua implementação do seu sistema você deverá informar as seguintes informações:\r\n\r\nDado      | Local de Preenchimento\r\n----------|------------------------------------------------\r\nProfile   | user.setAttribute(\"PROFILE\", [Profile/Perfil do usuário no sistema])\r\nWhere     | user.setAttribute(\"IP\", [IP do usuário no sistema])\r\nUserName  | user.setAttribute(\"NAME\", [Login/Nome/Identificador do usuário no sistema])\r\n\r\nMaiores informações no link http://demoiselle.sourceforge.net/docs/framework/reference/2.4.0/html/security.html\r\n\r\nUm exemplo de um Auditor esta na classe *impl/auditors/persistence/src/main/java/br/gov/frameworkdemoiselle/component/audit/auditors/persistence/PersistenceAuditor.java*\r\n\r\n## Como utilizar\r\n\r\n### pom.xml\r\nEm seu projeto que você deseja auditar, você deve adicionar no seu pom.xml no campo de dependências do projeto as seguintes linhas:\r\n\r\n```xml\r\n<dependencies>\r\n    ...\r\n    <!-- Auditor -->\r\n    <dependency>\r\n        <groupId>br.gov.frameworkdemoiselle.component.audit</groupId>\r\n        <artifactId>demoiselle-audit-auditors-persistence</artifactId>\r\n        <version>1.0.3</version>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>br.gov.frameworkdemoiselle.component.audit</groupId>\r\n        <artifactId>demoiselle-audit-auditors-view</artifactId>\r\n        <version>1.0.3</version>\r\n    </dependency>\r\n\r\n    <!-- Processor -->\r\n    <dependency>\r\n       \t<groupId>br.gov.frameworkdemoiselle.component.audit</groupId>\r\n      \t<artifactId>demoiselle-audit-processors-rest</artifactId>\r\n       \t<version>1.0.3</version>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>br.gov.frameworkdemoiselle.component.audit</groupId>\r\n        <artifactId>demoiselle-audit-processors-mongo</artifactId>\r\n        <version>1.0.3</version>\r\n    </dependency>\r\n    ...\r\n</dependencies>\r\n```\r\n\r\nNo código acima estamos utilizando o Auditor para a camada de Persistência e para a camada de Visão e o Processor para REST e o Processor para MONGO, você poderá adicionar quantos Processors e quantos Auditors você quiser.\r\n\r\n### demoiselle.properties\r\n\r\nNo seu arquivo demoiselle.properties você precisará adicionar as seguintes linhas:\r\n\r\nChave                                         | Valor\r\n--------------------------------------------------- | --------------------------\r\nframeworkdemoiselle.audit.system                    | Nome do seu Sistema\r\nframeworkdemoiselle.audit.scheduler.repeat.interval | Intervalo de tempo em milisegundos para o reprocessamento das trilhas\r\nframeworkdemoiselle.audit.scheduler.start.time      | Tempo em milisegundos de quando será executado o primeiro reprocessamento após o inicio da aplicação\r\nframeworkdemoiselle.audit.folder.fail.objects       | Pasta onde a aplicação terá direito de escrita e leitura para o armazenamento das trilhas que apresentaram problemas no processamento\r\n\r\nPara o Processor de REST você deverá adicionar a seguinte linha:\r\n\r\nChave                         | Valor\r\n------------------------------| --------------------------\r\nframeworkdemoiselle.audit.processor.rest.server.url | Endereço do Serviço REST (Ex.: http://localhost:8080/dash)\r\n\r\nPara o Processor de MONGO você deverá adicionar a seguinte linha:\r\n\r\nChave                         | Valor\r\n------------------------------| --------------------------\r\nframeworkdemoiselle.audit.processor.mongo.server.url      | Endereço do MongoDB\r\nframeworkdemoiselle.audit.processor.mongo.database.name   | Nome do Database\r\nframeworkdemoiselle.audit.processor.mongo.collection.name | Nome da Coleção\r\nframeworkdemoiselle.audit.processor.mongo.database.user     | Usuário (se necessário)\r\nframeworkdemoiselle.audit.processor.mongo.database.password | Senha\r\n\r\n### PersistenceAuditor\r\nVocê poderá escolher quais serão suas Entidades JPA que serão auditadas na camada de persistência, para isso adicione a anotação do JPA @EntityListeners com o valor de PersistenceAuditor.class.\r\n\r\nExemplo\r\n\r\n```java\r\n@Entity\r\n@EntityListeners(value = PersistenceAuditor.class)\r\npublic class Bookmark implements Serializable {\r\n    ...\r\n}\r\n```\r\n\r\n## Dashboard\r\n\r\nPara facilitar a busca de informações do que foi feito no sistema contruímos um Dashboard que traz 4 visões diferentes dos mesmos dados:\r\n\r\n- Visão de Sistema que se aprofunda em Pessoa e a Funcionalidade executada;\r\n- Visão da Pessoa que se aprofunda no Sistema e a Funcionalidade executada;\r\n- Visão de Funcionalidade que se aprofunda no Sistema e a Pessoa que executou;\r\n- Visão de Rastreamento que através de filtros como Sistema, Objeto e Identificador do Objeto mostrar o histórico de operações realizadas no Objeto;\r\n\r\nO Dashboard também fornece um serviço de REST para o Processor RESTProcessor, caso você utilize este processor no seu projeto e não queira implementar seu próprio serviço de REST você poderá utilizar o Dashboard para essa finalidade.\r\n\r\n### Como instalar o Dashboard\r\n\r\nFaça um clone do projeto e acesse a pasta **demoiselle-audit/impl/dashboard**, você precisará alterar o arquivo persistence.xml de acordo com as configurações do seu banco de dados onde serão armazenados as trilhas de auditoria, após feito essa configuração abra um terminal na pasta do \"dashboard\" e execute o comando maven:\r\n\r\n```\r\n    $mvn clean compile package\r\n```\r\n\r\nEsse comando irá gerar um arquivo chamado **demoiselle-audit-dashboard.war** na pasta target.\r\n\r\nAgora que você já tem o arquivo .war você poderá fazer o deploy no seu servidor.\r\n\r\n## Exemplo de Aplicação\r\n\r\nVocê encontrará no link https://github.com/demoiselle/laboratory/tree/master/examples o projeto BookmarkAudit que utiliza o componente de auditoria;\r\n\r\n## Recomendações\r\n\r\nPor se tratar de um componente de auditoria alguns pontos devem ser observados:\r\n\r\n- O servidor onde serão armazenadas as trilhas de auditoria deverá ser blindado e com acesso restrito para que seja garantida a confiabilidade das informações armazenadas;\r\n- Seguir as recomendações do NIST no link\r\nhttp://csrc.nist.gov/publications/nistpubs/800-92/SP800-92.pdf\r\n\r\n## Links úteis\r\n\r\n- Documentação: Aprenda agora! *(por enquanto o próprio README.md, estamos trabalhando para criar uma documentação no formato docbook)*\r\n- [Fórum](https://github.com/demoiselle/laboratory/issues): Abra um issue para discutirmos um assunto.\r\n- [Bugs e Sugestões](https://github.com/demoiselle/laboratory/issues): Abra um issue para submeter e acompanhar Bugs, enviar dúvidas, propor melhorias ou novas funcionalidades\r\n- Catálogo de Arquétipos Snapshot: Para versões de desenvolvimento (snapshot)\r\n- [Aplicação de Exemplo](https://github.com/demoiselle/laboratory/tree/master/examples/bookmark-audit)\r\n- Exemplos no Openshift \r\n    -  http://audit-fwkdemoiselle.rhcloud.com/dashboard/dash.jsf\r\n    -  http://agenda-fwkdemoiselle.rhcloud.com/index.jsf\r\n\r\n\r\n## Repositório Maven\r\n\r\nA publicar\r\n\r\n## Todo\r\n\r\n- Melhoria nos testes;\r\n- Arquétipos para Auditors e Processors;\r\n\r\n## Contribuindo\r\n\r\nFaça um clone do projeto e ajude a crescer esse projeto :)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}